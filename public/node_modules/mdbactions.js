var mdbData = require('mdbcon');
var assert = require('assert');
var db = mdbData.getDB();

//var objectId = mdbData.ObjectID;

var actionList = {};
actionList['collect'] = getCollection;
actionList['login'] = ckPass;
actionList['registerMember'] = insertMember;
actionList['updateMemeber'] = updateMember;
actionList['getIdByUname'] = getIdByUname;
actionList['getById'] = getById;

function action(cmd, data, response) {
  //console.log("about to route a request for " + pathname);
  if (typeof actionList[cmd] === 'function') {
    actionList[cmd](data, response);
  } else {
    console.log("No action found for " + cmd);
  }
}

function ckPass(qdata, result) {
  var collection = db.collection("members");
  console.log("the query: " + qdata['uname'] + " " + qdata['pword']);
  var cursor = collection.find({uid: qdata['uname']}).limit(1);
  //collection.findOne({uid: qdata['uname'], data: 'dataB'}, function(err, document) {
  cursor.count(function(err, count) {
    console.log("cursor count: " + JSON.stringify(count));
  }); 
  cursor.nextObject(result);
  cursor.explain(function(err, explaination) {
        assert.equal(null, err);
		console.log("the query explained: " + JSON.stringify(explaination));
  });
}

function insertMember(member, result) {
  var collection = db.collection("members");
  // Insert a single document
  collection.insert(member, {w:1}, function(err, result) {
    assert.equal(null, err);
	console.log("insert new id = " + result[0]._id);
  })
};

function getIdByUname(uname, result) {
  var collection = db.collection("members");
  console.log("the query: " + uname);
  var cursor = collection.find({uid: uname}).limit(1);
 
  cursor.nextObject(result);
  cursor.explain(function(err, explaination) {
        assert.equal(null, err);
		console.log("the query explained: " + JSON.stringify(explaination));
  });
};

function getById(id, result) {
  var moID = mdbData.getOID("" + id);
  var collection = db.collection("members");
  console.log("the query: " + moID);
  var cursor = collection.find({_id: moID}).limit(1);
 
  cursor.nextObject(result);
  cursor.explain(function(err, explaination) {
        assert.equal(null, err);
		console.log("the query explained: " + JSON.stringify(explaination));
  });
};

function updateMember(data, response) {
  console.log("Data recieved: " + JSON.stringify(data));  //data = id:newMemeberObj
  var moID = mdbData.getOID("" + data.id);
  console.log("moID: " + moID);
  var set = {};
  set[data.prop] = data.nuval;
  //obj = new ObjectID("5386513bf73ac672c641dcc7"); 
  db.collection('members').findAndModify(
  {_id : moID }, // query
  [['_id','asc']],  // sort order
  {$set: set}, // replacement, replaces only the field "hi"
  {}, // options
  function(err, object) {
    if (err){
      console.log(err.message);  // returns error if no matching object found
    } else {
      console.log("result of update: " + JSON.stringify(object));
    }
  });
};

function getCollection(col, response) {
  console.log("Get " + col + " collection in mdbactions: ");
  var collection = db.collection(col);
  collection.find().toArray(function(err, docs) {
    //console.log("docs... " + docs.length + " : " + docs);
    assert.equal(null, err);
    assert.notEqual(null, docs);
	//console.log("before: " + docs );
	if (col == 'skills') {
      var rdataS = JSON.stringify({skills:docs});   // stringify from object
	} else {
	  var rdataS = JSON.stringify({members:docs});
	}
	//console.log(rdataS);
    response.writeHead(200, {"Content-Type": "application/json"});
    response.write(rdataS);
    //console.log("content: " + rdataS);
    response.end();
  })
  return false;
};

exports.action = action;