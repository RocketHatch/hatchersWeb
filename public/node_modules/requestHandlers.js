var http = require("http");
var url = require("url");
var router = require('router');
var path = require("path");
var fs = require("fs");
var qs = require("querystring");
var session = require('session');
var inspect = require('util').inspect;
var mdb = require('mdbactions');
var nmail = require('sendNotification');
var msgs = require('emailNotify.json');
//var crypto = require('crypto');
//var Busboy = require('busboy');

function start(request, response) {
  //console.log("what is process.cwd? " + process.cwd());
  var uri = url.parse(request.url).pathname,
      //filename = path.join("."+process.cwd(), uri);
	  filename = path.join('app', uri);

  var contentTypesByExtension = {
    '.html': "text/html",
    '.css':  "text/css",
    '.js':   "text/javascript",
    '.jpg':  "image/jpeg",
    '.gif':  "image/gif",
    '.png':  "image/png",
    '.ico':  "image/x-icon"
  };

  fs.exists(filename, function(exists) {
    if(!exists) {
      console.log("File not found: " + filename);
      response.writeHead(404, {"Content-Type": "text/plain"});
      response.write("404 Not Found\n");
      response.end();
      return;
    }

    if (fs.statSync(filename).isDirectory() ) filename += 'index.html';
    fs.readFile(filename, "binary", function(err, file) {
      if(err) {
        response.writeHead(500, {"Content-Type": "text/plain"});
        response.write("This is a file not found error: " + filename + " : " + err + "\n");
        response.end();
        return;
      }

      var headers = {};
      var contentType = contentTypesByExtension[path.extname(filename)];
      if (contentType) { headers["Content-Type"] = contentType; /*console.log("ctype " + contentType);*/}

      response.writeHead(200, headers);
      response.write(file, "binary");
      response.end();
    });
  });
}

function login(request, response) {
  console.log("Request handler 'login' was called: ");
  var uname = "";
  var pword = "";
  var data = url.parse(request.url).query;
  var qdata = qs.parse(data);
  if (qdata) {
    uname = (!qdata['uname']) ? "" : qdata['uname'];
    pword = (!qdata['pword']) ? "" : qdata['pword'];
    console.log("data: u/p: " + uname + " : " + pword);
  }
  
  var ret = null;
  mdb.action('login', qdata, function(err, results) {
    if (err) {
      console.error("[login]--> " + err);
    } else {
      if (results){
	  	  if (results.data === qdata['pword']) {
	        console.log("Login check successful for member " + results.name.lname );
			var thissession = session.getSession();
			//--------- test --------
			var oldSession = session.findIndexByUser(results._id);
            if (oldSession > -1)  {
		      session.listSessions();					   
              session.deleteSession(null, oldSession);
              ret = {sid:thissession.id,
                       member:results,
                       message:'Logging off older session'};		  
            } else {
              var ret = {sid:thissession.id,member:results} ;
            }
			console.log("add " + results.name.lname + " to the session list");
            thissession.member_id = results._id;
            thissession.lastHit = new Date().getTime();
            session.listSessions();			
			//--------end test ------
		  } else {
		    ret = {message: 'email/password combination not valid'};
		    console.log("Login try: uid password combination not valid");
		  }
        //var rdata = {message: 'Username or Password Not found'}
      } else {
	    ret = {message: 'email not in system'};
        console.log("Login try: uid not in system");	  
 
      }
      var rdataS = JSON.stringify(ret);   // stringify from object
      response.writeHead(200, {"Content-Type": "application/json"});
      response.write(rdataS);
      console.log("content-->: " + rdataS);
	  session.listSessions();
      response.end();
    }
  });
}

function get(request, response) {
  console.log("Request handler 'get' was called: "  + request.url);

  var req = url.parse(request.url).query;
  var qdata = qs.parse(req);
  var act = Object.keys(qdata)[0];
  console.log("Key: " + Object.keys(qdata)[0]);
  if (qdata[act]) { 
    data = qdata[act];
	console.log("collection to find: " + data);
  } 
  if (data) {
    mdb.action(act, data, response);
  } 
}

function send(request, response) {
  console.log("Request handler 'send' was called: "  + request.url);
  var body = '';
  var data = '';
  request.on('data', function (data) {
    body += data;
    //  if(body.length > 1e6) // FLOOD ATTACK OR FAULTY CLIENT, NUKE req
    //  {
    //       req.connection.destroy();
    //  }
  });
  request.on('end', function () {
    console.log("Body: " + body);
    var json = JSON.parse(body);
    console.log("message = " + json.usermess);
	//var message = JSON.parse(json);
	var messObj = json.usermess;
	var txt = "";
    if (messObj.email != null) {
      console.log('message = ' + messObj.name.fname + " " + messObj.name.lname);
      console.log('message obj = ' + messObj);	  
      var name = "";
	  
      if (messObj.name.fname) {
	    name = name.concat(messObj.name.fname);
	  } 
	  if (messObj.name.lname) {
	    name = name.concat(" " + messObj.name.lname);
	  } 
	  console.log("name: " + name);
      var subj = name + " has sent you a message via Rocket Hatch... "
      txt = messObj.txt + "\n\n------------\nContact Info:\n";
	  if (messObj.phone) {
	    txt = txt.concat("Phone: " + messObj.phone + '\n');
	  } 
      txt = txt.concat("Email: " + messObj.email);
	  console.log("Body of message: " + txt);
      nmail.send(messObj.recip, subj, txt, response);
	  //response.writeHead(200, { 'Connection': 'close' });
      //response.end("That's all folks!");
    } else if (messObj.txt === "Reset Data") { 
      console.log("Prep a reset message: " + messObj.txt);
	  mdb.action('getIdByUname', messObj.recip, function(err, results) {
	    if (results === null) {
		  var ret = {message: 'Email not in our system'};
		  var rdataS = JSON.stringify(ret);   // stringify from object
		  response.writeHead(200, {"Content-Type": "application/json"});
		  response.write(rdataS);
		  console.log("content-->: " + rdataS);
		  session.listSessions();
		  response.end();
		} else {
		  var ret ={message: "Check your email for instructions on resetting password"};
	      txt = "Hello " + results.name.fname + ' ' + results.name.lname;
		  txt = txt + "\n\n" + msgs.forgotpwp1 + 
		          '\n\n  http://'+process.env.HOST+'/rdata?dat=' + results._id +
                  "\n\n" + msgs.forgotpwp2 + "\n\n" + 'hatchers@rockethatch.com' +
                  "\n\n" + msgs.messageend;
		  var subj = "reset";
		  var txts = [txt, ret];
          nmail.send(messObj.recip, subj, txts, response);				  
	      console.log("User ID = " + results._id);
		}
	  });
    }   		
  });
}

function register(request, response) {
  var body = '';
  var data = '';
  var ret = null;
  //----- 
  //var toHash = qs.stringify(request.query) + process.env.SECRET;
  //var sig = sha1(toHash);
  //console.log("Signature: " + sig);
  //----- 
  console.log("Response in handlers: " + response);
  request.on('data', function (data) {
    body += data;
    //  if(body.length > 1e6) // FLOOD ATTACK OR FAULTY CLIENT, NUKE req
    //  {
    //       req.connection.destroy();
    //  }
  });
  request.on('end', function () {
    console.log("Body: " + body);
    var nMember = JSON.parse(body);
	var txt = "";   
    //console.log("member = " + json);
	//var member = JSON.parse(json);
    if (nMember.uid != null) {
      var data = {member:nMember}	
	  mdb.action('registerMember', data, response);
    }
  });
}

function updateDB(request, response) {
  console.log("Request handler 'updateDB' was called: ");
  var body = '';
  var data = '';
  var ret = null;
  request.on('data', function (data) {
    body += data;
    //  if(body.length > 1e6) // FLOOD ATTACK OR FAULTY CLIENT, NUKE req
    //  {
    //       req.connection.destroy();
    //  }
  });
  request.on('end', function () {
    console.log("Body: " + body);
    var data = JSON.parse(body);
    var qdata = null;
    if (data.sid) {
      console.log("data: sid : property/nuval: " + data.sid + " : " + data.prop + "/" + data.nuval);
	  console.log("member id for this session: " + (session.getSession(data.sid)).member_id);
	  qdata = {id:(session.getSession(data.sid)).member_id,prop:data.prop,nuval:data.nuval};
    } else if (data.mid) {
	  console.log("data: mid : property/nuval: " + data.mid + " : " + data.prop + "/" + data.nuval);
	  console.log("member id for reset: " + data.mid);
	  qdata = {id:data.mid,prop:data.prop,nuval:data.nuval};
	}
	//qdata = {id:(session.getSession(data.sid)).member_id,prop:data.prop,nuval:data.nuval};
    mdb.action('updateMemeber', qdata, function(err, response) {	    
		if (err) {
		  console.error("[updateMember]--> " + err);
		} else {
		  if (results){
			ret = {message: 'Member profile updated'};
			console.log("[rh] memberUpdated: " + JSON.stringify(results));	  
		  } else {
			ret = {message: 'Member not updated'};
			console.log("memberUpdate: not sure");	  
	 
		  }
		  var rdataS = JSON.stringify(ret);   // stringify from object
		  response.writeHead(200, {"Content-Type": "application/json"});
		  response.write(rdataS);
		  console.log("content-->: " + rdataS);
		  session.listSessions();
		  response.end();
		}
    });
  });
}

function filter(request, response) {
  console.log("Request handler 'filter' was called: ");
}

function edit(request, response) {
  console.log("Request handler 'edit' was called: ");
}

/*
function upimage(request, response) {
  console.log("Request handler 'upimage' was called: " + request);
  console.log('just got file name ' + JSON.stringify(file));
  var uploadedBytes = 0;
  var busboy = new Busboy({ headers: request.headers });
  busboy.on('file', function(fieldname, file, filename, encoding, mimetype) {
    console.log("fieldname : " + fieldname + "; file : " + file + "; filename : " + "myNewName");
    console.log("encoding : " + encoding + "; mimetype : " + mimetype);
    uploadedBytes += file.length;
    //file.pipe(fs.createWriteStream(config.mphotoDir + "test.png"));
  });
  busboy.on('finish', function() {
    response.writeHead(200, { 'Connection': 'close' });
    response.end("That's all folks!");
  });
  return request.pipe(busboy);
}
*/

function reset(request, response) {
console.log("Request handler 'reset' was called: " + request);
  displayPage("rdata", request, response);
}
function confirm(request, response){
console.log("Request handler 'confirm' was called: " + request);
  displayPage("ndata", request, response);
}

function displayPage(page, request, response) {
  //console.log("Request handler 'reset' was called: " + request);
  var data = url.parse(request.url).query;
  var _id = (qs.parse(data)).dat;
  mdb.action('getById', _id, function(err, results) {			  
	console.log("User ID = " + results.uid); 
	var headers = {};
	headers["Content-Type"] = "text/html"; /*console.log("ctype " + contentType);*/
	response.writeHead(200, headers);
		  
	var readline = require('readline');
	var stream = require('stream');
	var instream = fs.createReadStream('./templates/'+page+'.tmpl');
	var outstream = new stream;
	var rl = readline.createInterface(instream, outstream);
	
	rl.on('line', function(line) {
	  if (line.indexOf("%%") >= 0) {
	    console.log("This is a line to deal with: " + line);
		var newline = parseLine(line, results)
		response.write(newline);
	  } else {
	    response.write(line);
	  }
	});

	rl.on('close', function() {
		  // do something on finish here
	  response.end();
	});
  });   
}

function parseLine(line, doc) {
  var repl = "";
  var lparts = line.split("%%");
  //var d = JSON.parse(doc);
  console.log("the thing to replace: " + lparts[1] + " : " + doc['uid']);
  if (lparts[1] === 'name') {
    repl = (doc['name'])['fname'] + " " + (doc['name'])['lname'];
  } else {
    repl = doc[lparts[1]];
  }
  var newline = lparts[0] + repl + lparts[2]
  console.log("newline: " + newline);
  return newline;
}

function sha1(data) {
  var generator = crypto.createHash('sha1');
  generator.update(data)
  return generator.digest('hex')
}

exports.start = start;
exports.login = login;
exports.get = get;
exports.send = send;
exports.register = register;
exports.filter = filter;
exports.edit = edit;
exports.updateDB = updateDB;
exports.reset = reset;
exports.confirm = confirm;
//exports.upimage = upimage;
  /*
  var body = '';
  var data = '';

  request.on('data', function (data) {
    body += data;
    //  if(body.length > 1e6) // FLOOD ATTACK OR FAULTY CLIENT, NUKE req
    //  {
    //       req.connection.destroy();
    //  }
  });
  request.on('end', function () {
    //console.log("Body: " + body);
    var json = JSON.parse(body);
    console.log("sid.com1 " + json['sid'].com1 + ":" + json['sid'].com2 + ":" + json['col']);
    if (json['val'] != null) { 
      var cc = json['col'];
    } 
    var thisSession = session.updateSession(json);
    var sqlstr =  osql.getSQL(thisSession);
    json = osql.getOrthoData(sqlstr, response, function(err, json) {     
	  if (!json[0]) {
	    json = {message: 'No Records Found!'}
      } else if (json.length == 1 || (json[0])['7th']) {
          json = osql.getICDCode(thisSession, function(err, json) {
          var dataS = JSON.stringify(json);   // stringify from object
          response.writeHead(200, {"Content-Type": "application/json"});
          response.write(dataS);
          console.log("content:" + dataS);
          response.end();
        });
        return;
      } 
      var dataS = JSON.stringify(json);   // stringify from object
      response.writeHead(200, {"Content-Type": "application/json"});
      response.write(dataS);
      console.log("content: " + dataS);
      response.end();
    });
  }); 
}

			  if (results.data === qdata['pword']) {
				console.log("Login check successful for member " + results.name.lname );
				var thissession = session.getSession();
				//--------- test --------
				var oldSession = session.findIndexByUser(results._id);
				if (oldSession > -1)  {
				  session.listSessions();					   
				  session.deleteSession(null, oldSession);
				  ret = {sid:thissession.id,
						   member:results,
						   message:'Logging off older session'};		  
				} else {
				  var ret = {sid:thissession.id,member:results} ;
				}
				console.log("add " + results.name.lname + " to the session list");
				thissession.member_id = results._id;
				thissession.lastHit = new Date().getTime();
				session.listSessions();			
				//--------end test ------
			  } else {
				ret = {message: 'email/password combination not valid'};
				console.log("Login try: uid password combination not valid");
			  }
			//var rdata = {message: 'Username or Password Not found'}
			
	//----------------------------------------------------	
    response.writeHead(200);
      var destinationFile = fs.createWriteStream(config.mphotoDir + "test.png");      
      request.pipe(destinationFile);
   
      //var fileSize = request.headers['content-length'];
	  //var fileName = Request["HTTP_X_FILE_NAME"];  // notice the "HTTP_" prefix
      //var fileSize = request["HTTP_X_FILE_SIZE"];

	  var fileSize = 76724;
	  console.log("file size: " + fileSize);
      var uploadedBytes = 0 ;

      request.on('data',function(d){  
                            
          uploadedBytes += d.length;
          var p = (uploadedBytes/fileSize) * 100;
          response.write("Uploading " + parseInt(p)+ " %\n");

     });

      request.on('end',function(){
            response.end("File Upload Complete");
          });
*/


